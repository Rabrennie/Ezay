!function(){"use strict";function h(t){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function n(t){var e=t.options.el;if("string"==typeof e&&(e=document.querySelector(e)),null==e)throw"Could not bind to element";t.dom=f(t,e),t.on("state-update",function(t){var e=v.call(this,this.dom,{},""),o=document.querySelector("[data-ezay-id=".concat(this.dom.props["data-ezay-id"],"]"));o.parentNode.replaceChild(e,o)}.bind(t))}function f(t,e){for(var o=[],r=0;r<e.childNodes.length;r++){var i=e.childNodes[r];o.push(f(t,i))}var n;return{type:e.nodeName,props:(n=e,"#text"!=n.nodeName?(n.setAttribute("data-ezay-id","_"+Math.random().toString(36).substr(2,9)),Array.prototype.reduce.call(n.attributes,function(t,e){return t[e.name]=e.value,t},{})):{textContent:n.textContent}),children:o}}function v(e,o){var r=this,t=e.props["data-ezay-id"],i=e.type.toLowerCase();if("#text"===i)return function(t,e){var o,r=/{{\s*([a-zA-Z0-9]+)\s*}}/g,i=t.props.textContent;for(;o=r.exec(i);){var n="";null!=e[o[1]]&&(n=e[o[1]]),i=i.replace(o[0],n)}return document.createTextNode(i)}(e,o);if(void 0!==this.models[i]){if(void 0===this.data[i][t]&&this.registerContext(t,i),!e.children.length&&ezay.templates[i])for(var n=ezay.templates[i].childNodes,s=0;s<n.length;s++){var a=n[s];e.children.push(f(ezay,a))}o=this.contextModels[i][t]}var c=document.createElement(i);for(var p in e.props)if(e.props.hasOwnProperty(p)){var d=function(){var t=e.props[p];if(c.setAttribute(p,t),"ezay:click"==p&&c.addEventListener("click",function(){return o[t].call(o)}),"ezay:for"==p)return y.call(r,t,o,e,c),{v:c}}();if("object"===h(d))return d.v}for(var l=0;l<e.children.length;l++){var u=e.children[l];c.appendChild(v.call(this,u,o))}return c}function y(t,e,o,r){var i=t.split(" in "),n=e[i[1]];if(void 0!==n)for(var s=0;s<n.length;s++)for(var a=n[s],c=0;c<o.children.length;c++){var p=o.children[c],d={};d[i[0]]=a,r.appendChild(v.call(this,p,d))}}function t(t){for(var e in this.options=Object.create(null),t)if(t.hasOwnProperty(e)){var o=t[e];void 0!==this.constructor.options[e]&&(this.options[e]=o)}for(var r in this.constructor.options)if(this.constructor.options.hasOwnProperty(r)){var i=this.constructor.options[r];if(void 0===this.options[r]){if(i.required)throw"Option ".concat(r," is required.");void 0!==i.default&&(this.options[r]=i.default)}}n(this)}function e(t,e){this.options[t]=Object.create(null),this.options[t].required=!!e.required,this.options[t].default=e.default}function o(t,e){void 0===this.eventListeners[t]&&(this.eventListeners[t]=[]),this.eventListeners[t].push(e)}function r(t,e){if(void 0!==this.eventListeners[t])for(var o=0;o<this.eventListeners[t].length;o++)this.eventListeners[t][o](e)}function i(t,e,o){if(t=t.toLowerCase(),void 0!==this.models[t])throw"Model "+t+" already registered.";this.models[t]=e,this.contextModels[t]=Object.create({}),this.data[t]=Object.create({}),void 0!==o&&(this.templates[t]=o.cloneNode(!0),o.parentNode&&o.parentNode.removeChild(o)),this.update()}function s(o,r){var i=function t(e){var o,r,i;o=Array.isArray(e)?[]:{};for(i in e)r=e[i],o[i]="object"===h(r)&&null!==r?t(r):r;return o}(this.models[r]);for(var t in this.contextModels[r][o]=i,this.data[r][o]=Object.create(null),Object.defineProperty(i,"$add",{configurable:!1,enumerable:!1,value:function(t,e){c.call(this,this.data[r][o],i,t,e),this.update(this.data[r][o],t)}.bind(this)}),i)i.hasOwnProperty(t)&&c.call(this,this.data[r][o],i,t);this.update()}function a(t,e){this.dispatch("state-update",{data:t,prop:e})}function c(e,t,o,r){var i=this;if(void 0!==r){if(e[o]=r,void 0!==t[o]&&!t[o].configurable)return}else e[o]=t[o];Array.isArray(e[o])&&function(o,r){for(var i=this,n=["reverse","sort","push","pop","shift","unshift","splice","concat","slice","copyWithin","fill"],t=function(t){var e=n[t];o[r][e]=function(){return Array.prototype[e].apply(o[r],arguments),i.update(o,r),o[r].length}},e=0;e<n.length;e++)t(e)}.call(this,e,o),Object.defineProperty(t,o,{get:function(){return e[o]},set:function(t){e[o]=t,i.update(e,o)}})}function p(t){this._init(t)}var d,l,u,b;(d=p).options=Object.create({}),d.registerOption=e,d.prototype._init=t,(l=p).prototype.eventListeners=Object.create({}),l.prototype.on=o,l.prototype.dispatch=r,(u=p).prototype.data=Object.create({}),u.prototype.models=Object.create({}),u.prototype.templates=Object.create({}),u.prototype.contextModels=Object.create({}),u.prototype.register=i,u.prototype.registerContext=s,u.prototype.update=a,(b=p).registerOption("el",{required:!0}),b.prototype.dom=Object.create({}),null!=window&&(window.Ezay=p)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
