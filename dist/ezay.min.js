!function(){"use strict";function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function n(t){var e=t.options.el;if("string"==typeof e&&(e=document.querySelector(e)),null==e)throw"Could not bind to element";t.dom=function t(e,o){var r=[];for(var i=0;i<o.childNodes.length;i++){var n=o.childNodes[i];r.push(t(e,n))}var s={type:o.nodeName,props:a(o),children:r};return s}(t,e),t.on("state-update",function(t){var e=d.call(this,this.dom,{},""),o=document.querySelector("[data-ezay-id=".concat(this.dom.props["data-ezay-id"],"]"));o.parentNode.replaceChild(e,o)}.bind(t))}function a(t){return"#text"==t.nodeName?{textContent:t.textContent}:(t.setAttribute("data-ezay-id","_"+Math.random().toString(36).substr(2,9)),Array.prototype.reduce.call(t.attributes,function(t,e){return t[e.name]=e.value,t},{}))}function d(e,o){var r=this,t=e.props["data-ezay-id"],i=e.type.toLowerCase();if("#text"===i)return function(t,e){var o,r=/{{\s*([a-zA-Z0-9]+)\s*}}/g,i=t.props.textContent;for(;o=r.exec(i);){var n="";null!=e[o[1]]&&(n=e[o[1]]),i=i.replace(o[0],n)}return document.createTextNode(i)}(e,o);void 0!==this.models[i]&&(void 0===this.data[i][t]&&this.registerContext(t,i),o=this.contextModels[i][t]);var n=document.createElement(i);for(var s in e.props)if(e.props.hasOwnProperty(s)){var a=function(){var t=e.props[s];if(n.setAttribute(s,t),"ezay:click"==s&&n.addEventListener("click",function(){return o[t].call(o)}),"ezay:for"==s)return l.call(r,t,o,e,n),{v:n}}();if("object"===u(a))return a.v}for(var c=0;c<e.children.length;c++){var p=e.children[c];n.appendChild(d.call(this,p,o))}return n}function l(t,e,o,r){var i=t.split(" in "),n=e[i[1]];if(void 0!==n)for(var s=0;s<n.length;s++)for(var a=n[s],c=0;c<o.children.length;c++){var p=o.children[c],u={};u[i[0]]=a,r.appendChild(d.call(this,p,u))}}function t(t){for(var e in this.options=Object.create(null),t)if(t.hasOwnProperty(e)){var o=t[e];void 0!==this.constructor.options[e]&&(this.options[e]=o)}for(var r in this.constructor.options)if(this.constructor.options.hasOwnProperty(r)){var i=this.constructor.options[r];if(void 0===this.options[r]){if(i.required)throw"Option ".concat(r," is required.");void 0!==i.default&&(this.options[r]=i.default)}}n(this)}function e(t,e){this.options[t]=Object.create(null),this.options[t].required=!!e.required,this.options[t].default=e.default}function o(t,e){void 0===this.eventListeners[t]&&(this.eventListeners[t]=[]),this.eventListeners[t].push(e)}function r(t,e){if(void 0!==this.eventListeners[t])for(var o=0;o<this.eventListeners[t].length;o++)this.eventListeners[t][o](e)}function i(t,e){if(t=t.toLowerCase(),void 0!==this.models[t])throw"Model "+t+" already registered.";this.models[t]=e,this.contextModels[t]=Object.create({}),this.data[t]=Object.create({}),this.update()}function s(o,r){var i=function t(e){var o,r,i;o=Array.isArray(e)?[]:{};for(i in e)r=e[i],o[i]="object"===u(r)&&null!==r?t(r):r;return o}(this.models[r]);for(var t in this.contextModels[r][o]=i,this.data[r][o]=Object.create(null),Object.defineProperty(i,"$add",{configurable:!1,enumerable:!1,value:function(t,e){p.call(this,this.data[r][o],i,t,e),this.update(this.data[r][o],t)}.bind(this)}),i)i.hasOwnProperty(t)&&p.call(this,this.data[r][o],i,t);this.update()}function c(t,e){this.dispatch("state-update",{data:t,prop:e})}function p(e,t,o,r){var i=this;if(void 0!==r){if(e[o]=r,void 0!==t[o]&&!t[o].configurable)return}else e[o]=t[o];Array.isArray(e[o])&&function(o,r){for(var i=this,n=["reverse","sort","push","pop","shift","unshift","splice","concat","slice","copyWithin","fill"],t=function(t){var e=n[t];o[r][e]=function(){return Array.prototype[e].apply(o[r],arguments),i.update(o,r),o[r].length}},e=0;e<n.length;e++)t(e)}.call(this,e,o),Object.defineProperty(t,o,{get:function(){return e[o]},set:function(t){e[o]=t,i.update(e,o)}})}function h(t){this._init(t)}var f,v,y,b;(f=h).options=Object.create({}),f.registerOption=e,f.prototype._init=t,(v=h).prototype.eventListeners=Object.create({}),v.prototype.on=o,v.prototype.dispatch=r,(y=h).prototype.data=Object.create({}),y.prototype.models=Object.create({}),y.prototype.contextModels=Object.create({}),y.prototype.register=i,y.prototype.registerContext=s,y.prototype.update=c,(b=h).registerOption("el",{required:!0}),b.prototype.dom=Object.create({}),null!=window&&(window.Ezay=h)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
