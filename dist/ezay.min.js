!function(){"use strict";function t(t){for(var i in this.options=Object.create(null),t)if(t.hasOwnProperty(i)){var o=t[i];void 0!==this.constructor.options[i]&&(this.options[i]=o)}for(var e in this.constructor.options)if(this.constructor.options.hasOwnProperty(e)){var r=this.constructor.options[e];if(void 0===this.options[e]){if(r.required)throw"Option ".concat(e," is required.");void 0!==r.default&&(this.options[e]=r.default)}}}function i(t,i){this.options[t]=Object.create(null),this.options[t].required=!!i.required,this.options[t].default=i.default}function o(o,e){if(void 0!==this.data[o])throw"Model "+o+" already registered.";for(var t in this.data[o]=Object.create(null),Object.defineProperty(e,"$add",{configurable:!1,enumerable:!1,value:function(t,i){r.call(this,this.data[o],e,t,i)}.bind(this)}),e)e.hasOwnProperty(t)&&r.call(this,this.data[o],e,t)}function e(t,i){console.log(t,i)}function r(i,t,o,e){var r=this;i[o]=void 0!==e?e:t[o],Object.defineProperty(t,o,{get:function(){return i[o]},set:function(t){i[o]=t,r.update(i,o)}})}function n(t){this._init(t)}var s,a;(s=n).options=Object.create({}),s.registerOption=i,s.prototype._init=t,(a=n).prototype.data=Object.create({}),a.prototype.register=o,a.prototype.update=e,n.registerOption("el",{required:!0}),null!=window&&(window.Ezay=n)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXpheS5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnN0YW5jZS9pbml0LmpzIiwiLi4vc3JjL2luc3RhbmNlL3N0YXRlLmpzIiwiLi4vc3JjL2luc3RhbmNlL2luZGV4LmpzIiwiLi4vc3JjL2luc3RhbmNlL3JlbmRlci5qcyIsIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbml0SW5pdChFemF5KSB7XHJcbiAgICBFemF5Lm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHt9KTtcclxuICAgIEV6YXkucmVnaXN0ZXJPcHRpb24gPSByZWdpc3Rlck9wdGlvbjtcclxuICAgIEV6YXkucHJvdG90eXBlLl9pbml0ID0gaW5pdDtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdChvcHRpb25zKSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IG9wdGlvbnNba2V5XTtcclxuICAgICAgICAgICAgaWYodGhpcy5jb25zdHJ1Y3Rvci5vcHRpb25zW2tleV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zW2tleV0gPSBvcHRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuY29uc3RydWN0b3Iub3B0aW9ucykge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLm9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLmNvbnN0cnVjdG9yLm9wdGlvbnNba2V5XTtcclxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zW2tleV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYob3B0aW9uLnJlcXVpcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgYE9wdGlvbiAke2tleX0gaXMgcmVxdWlyZWQuYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKG9wdGlvbi5kZWZhdWx0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IG9wdGlvbi5kZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZWdpc3Rlck9wdGlvbihuYW1lLCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLm9wdGlvbnNbbmFtZV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgdGhpcy5vcHRpb25zW25hbWVdLnJlcXVpcmVkID0gISFvcHRpb25zLnJlcXVpcmVkO1xyXG4gICAgdGhpcy5vcHRpb25zW25hbWVdLmRlZmF1bHQgPSBvcHRpb25zLmRlZmF1bHQ7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbml0SW5pdDsiLCJmdW5jdGlvbiBpbml0U3RhdGUoRXpheSkge1xyXG4gICAgRXpheS5wcm90b3R5cGUuZGF0YSA9IE9iamVjdC5jcmVhdGUoe30pO1xyXG4gICAgRXpheS5wcm90b3R5cGUucmVnaXN0ZXIgPSByZWdpc3RlcjtcclxuICAgIEV6YXkucHJvdG90eXBlLnVwZGF0ZSA9IHVwZGF0ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVnaXN0ZXIobmFtZSwgb2JqKSB7XHJcbiAgICBpZiAodGhpcy5kYXRhW25hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aHJvdyBcIk1vZGVsIFwiICsgbmFtZSArIFwiIGFscmVhZHkgcmVnaXN0ZXJlZC5cIlxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZGF0YVtuYW1lXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJyRhZGQnLCB7XHJcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24ocHJvcCwgdmFsKSB7XHJcbiAgICAgICAgICAgIGFkZFdhdGNoZXIuY2FsbCh0aGlzLCB0aGlzLmRhdGFbbmFtZV0sIG9iaiwgcHJvcCwgdmFsKTtcclxuICAgICAgICB9LmJpbmQodGhpcylcclxuICAgIH0pO1xyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICBhZGRXYXRjaGVyLmNhbGwodGhpcywgdGhpcy5kYXRhW25hbWVdLCBvYmosIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBUT0RPOiBkbyBzb21ldGhpbmdcclxuZnVuY3Rpb24gdXBkYXRlKGRhdGEsIHByb3ApIHtcclxuICAgIGNvbnNvbGUubG9nKGRhdGEsIHByb3ApO1xyXG59XHJcblxyXG4vLyBUT0RPOiBoYW5kbGUgYXJyYXlzL29iamVjdHNcclxuZnVuY3Rpb24gYWRkV2F0Y2hlcihkYXRhLCBvYmosIHByb3AsIHZhbCkge1xyXG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGlmKHZhbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZGF0YVtwcm9wXSA9IHZhbFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBkYXRhW3Byb3BdID0gb2JqW3Byb3BdO1xyXG4gICAgfVxyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRhdGFbcHJvcF0gfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHsgZGF0YVtwcm9wXSA9IHZhbDsgX3RoaXMudXBkYXRlKGRhdGEsIHByb3ApOyB9LFxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGluaXRTdGF0ZTtcclxuIiwiaW1wb3J0IGluaXRJbml0IGZyb20gJy4vaW5pdC5qcydcclxuaW1wb3J0IGluaXRTdGF0ZSBmcm9tICcuL3N0YXRlLmpzJ1xyXG5pbXBvcnQgaW5pdFJlbmRlciBmcm9tICcuL3JlbmRlci5qcydcclxuXHJcbmZ1bmN0aW9uIEV6YXkob3B0aW9ucykge1xyXG4gICAgdGhpcy5faW5pdChvcHRpb25zKTtcclxufVxyXG5cclxuaW5pdEluaXQoRXpheSk7XHJcbmluaXRTdGF0ZShFemF5KTtcclxuaW5pdFJlbmRlcihFemF5KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEV6YXk7IiwiZnVuY3Rpb24gaW5pdFJlbmRlcihFemF5KSB7XHJcblxyXG4gICAgRXpheS5yZWdpc3Rlck9wdGlvbignZWwnLCB7XHJcbiAgICAgICAgJ3JlcXVpcmVkJzogdHJ1ZVxyXG4gICAgfSk7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbml0UmVuZGVyOyIsImltcG9ydCBFemF5IGZyb20gJy4vaW5zdGFuY2UvaW5kZXguanMnO1xyXG5cclxuaWYod2luZG93ICE9IG51bGwpIHtcclxuICAgIHdpbmRvdy5FemF5ID0gRXpheTtcclxufSJdLCJuYW1lcyI6WyJpbml0Iiwib3B0aW9ucyIsImtleSIsIk9iamVjdCIsImNyZWF0ZSIsImhhc093blByb3BlcnR5Iiwib3B0aW9uIiwidW5kZWZpbmVkIiwidGhpcyIsImNvbnN0cnVjdG9yIiwicmVxdWlyZWQiLCJkZWZhdWx0IiwicmVnaXN0ZXJPcHRpb24iLCJuYW1lIiwicmVnaXN0ZXIiLCJvYmoiLCJkYXRhIiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwidmFsdWUiLCJwcm9wIiwidmFsIiwiYWRkV2F0Y2hlciIsImNhbGwiLCJiaW5kIiwidXBkYXRlIiwiY29uc29sZSIsImxvZyIsIl90aGlzIiwiZ2V0Iiwic2V0IiwiRXpheSIsIl9pbml0IiwicHJvdG90eXBlIiwid2luZG93Il0sIm1hcHBpbmdzIjoieUJBTUEsU0FBU0EsRUFBS0MsT0FHTCxJQUFNQyxVQUZORCxRQUFVRSxPQUFPQyxPQUFPLE1BRVhILEtBQ1ZBLEVBQVFJLGVBQWVILEdBQU0sS0FDdkJJLEVBQVNMLEVBQVFDLFFBQ2NLLElBQWxDQyxLQUFLQyxZQUFZUixRQUFRQyxVQUNuQkQsUUFBUUMsR0FBT0ksT0FLM0IsSUFBTUosS0FBT00sS0FBS0MsWUFBWVIsV0FDM0JPLEtBQUtDLFlBQVlSLFFBQVFJLGVBQWVILEdBQU0sS0FDeENJLEVBQVNFLEtBQUtDLFlBQVlSLFFBQVFDLFdBQ2ZLLElBQXRCQyxLQUFLUCxRQUFRQyxHQUFvQixJQUM3QkksRUFBT0ksK0JBQ1VSLHdCQUVFSyxJQUFuQkQsRUFBT0ssZUFDRFYsUUFBUUMsR0FBT0ksRUFBT0ssV0FPL0MsU0FBU0MsRUFBZUMsRUFBTVosUUFDckJBLFFBQVFZLEdBQVFWLE9BQU9DLE9BQU8sV0FDOUJILFFBQVFZLEdBQU1ILFdBQWFULEVBQVFTLGNBQ25DVCxRQUFRWSxHQUFNRixRQUFVVixFQUFRVSxRQzlCekMsU0FBU0csRUFBU0QsRUFBTUUsV0FDSVIsSUFBcEJDLEtBQUtRLEtBQUtILFFBQ0osU0FBV0EsRUFBTywyQkFhdkIsSUFBTVgsVUFWTmMsS0FBS0gsR0FBUVYsT0FBT0MsT0FBTyxNQUVoQ0QsT0FBT2MsZUFBZUYsRUFBSyxPQUFRLENBQy9CRyxjQUFjLEVBQ2RDLFlBQVksRUFDWkMsTUFBTyxTQUFTQyxFQUFNQyxHQUNsQkMsRUFBV0MsS0FBS2hCLEtBQU1BLEtBQUtRLEtBQUtILEdBQU9FLEVBQUtNLEVBQU1DLElBQ3BERyxLQUFLakIsUUFHT08sRUFDVkEsRUFBSVYsZUFBZUgsSUFDbkJxQixFQUFXQyxLQUFLaEIsS0FBTUEsS0FBS1EsS0FBS0gsR0FBT0UsRUFBS2IsR0FNeEQsU0FBU3dCLEVBQU9WLEVBQU1LLEdBQ2xCTSxRQUFRQyxJQUFJWixFQUFNSyxHQUl0QixTQUFTRSxFQUFXUCxFQUFNRCxFQUFLTSxFQUFNQyxPQUMzQk8sRUFBUXJCLEtBR1ZRLEVBQUtLLFFBREVkLElBQVJlLEVBQ2NBLEVBRUFQLEVBQUlNLEdBR3JCbEIsT0FBT2MsZUFBZUYsRUFBS00sRUFBTSxDQUM3QlMsSUFBSyxrQkFBcUJkLEVBQUtLLElBQy9CVSxJQUFLLFNBQVVULEdBQU9OLEVBQUtLLEdBQVFDLEVBQUtPLEVBQU1ILE9BQU9WLEVBQU1LLE1DekNuRSxTQUFTVyxFQUFLL0IsUUFDTGdDLE1BQU1oQyxHRkxmLElBQWtCK0IsRUNBQ0EsR0RBREEsRUVRVEEsR0ZQQS9CLFFBQVVFLE9BQU9DLE9BQU8sSUFDN0I0QixFQUFLcEIsZUFBaUJBLEVBQ3RCb0IsRUFBS0UsVUFBVUQsTUFBUWpDLEdDSFJnQyxFQ1NUQSxHRFJERSxVQUFVbEIsS0FBT2IsT0FBT0MsT0FBTyxJQUNwQzRCLEVBQUtFLFVBQVVwQixTQUFXQSxFQUMxQmtCLEVBQUtFLFVBQVVSLE9BQVNBLEVDT2pCTSxFQ1JGcEIsZUFBZSxLQUFNLFdBQ1YsSUNEUCxNQUFWdUIsU0FDQ0EsT0FBT0gsS0FBT0EifQ==
