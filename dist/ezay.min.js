!function(){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t){var e=t.options.el;if("string"==typeof e&&(e=document.querySelector(e)),null==e)throw"Could not bind to element";t.dom=function t(e,o){var r=[];for(var n=0;n<o.childNodes.length;n++){var i=o.childNodes[n];r.push(t(e,i))}var a={type:o.nodeName,props:s(o),children:r};return a}(t,e),t.on("state-update",function(t){var e=function c(p,d,t){var u=this;if("#text"===p.type)return a(p,d);void 0!==this.models[p.type.toLowerCase()]&&(void 0===this.data[p.type.toLowerCase()][p.props["data-ezay-id"]]&&this.registerContext(p.props["data-ezay-id"],p.type.toLowerCase(),Object.assign({},this.models[p.type.toLowerCase()])),d=this.contextModels[p.type.toLowerCase()][p.props["data-ezay-id"]]);var l=document.createElement(p.type);for(var h in p.props)if(p.props.hasOwnProperty(h)){var e=function(){var t=p.props[h];if(l.setAttribute(h,t),"ezay:click"==h&&l.addEventListener("click",function(){return d[t].call(d)}),"ezay:for"==h){for(var e=t.split(" in "),o=d[e[1]],r=0;r<o.length;r++)for(var n=o[r],i=0;i<p.children.length;i++){var a=p.children[i],s={};s[e[0]]=n,l.appendChild(c.call(u,a,s))}return{v:l}}}();if("object"===n(e))return e.v}for(var o=0;o<p.children.length;o++){var r=p.children[o];l.appendChild(c.call(this,r,d))}return l}.call(this,this.dom,{},""),o=document.querySelector("[data-ezay-id=".concat(this.dom.props["data-ezay-id"],"]"));o.parentNode.replaceChild(e,o)}.bind(t))}function s(t){return"#text"==t.nodeName?{textContent:t.textContent}:(t.setAttribute("data-ezay-id","_"+Math.random().toString(36).substr(2,9)),t&&Array.prototype.reduce.call(t.attributes,function(t,e){return t[e.name]=e.value,t},{})||{})}function a(t,e){for(var o,r=/{{\s*([a-zA-Z0-9]+)\s*}}/g,n=t.props.textContent;o=r.exec(n);){var i="";null!==e[o[1]]&&(i=e[o[1]]),n=n.replace(o[0],i)}return document.createTextNode(n)}function t(t){for(var e in this.options=Object.create(null),t)if(t.hasOwnProperty(e)){var o=t[e];void 0!==this.constructor.options[e]&&(this.options[e]=o)}for(var r in this.constructor.options)if(this.constructor.options.hasOwnProperty(r)){var n=this.constructor.options[r];if(void 0===this.options[r]){if(n.required)throw"Option ".concat(r," is required.");void 0!==n.default&&(this.options[r]=n.default)}}i(this)}function e(t,e){this.options[t]=Object.create(null),this.options[t].required=!!e.required,this.options[t].default=e.default}function o(t,e){void 0===this.eventListeners[t]&&(this.eventListeners[t]=[]),this.eventListeners[t].push(e)}function r(t,e){if(void 0!==this.eventListeners[t])for(var o=0;o<this.eventListeners[t].length;o++)this.eventListeners[t][o](e)}function c(t,e){if(void 0!==this.models[t])throw"Model "+t+" already registered.";this.models[t]=e,this.contextModels[t]=Object.create({}),this.data[t]=Object.create({}),this.update()}function p(o,r,n){for(var t in this.contextModels[r][o]=n,this.data[r][o]=Object.create(null),Object.defineProperty(n,"$add",{configurable:!1,enumerable:!1,value:function(t,e){u.call(this,this.data[r][o],n,t,e)}.bind(this)}),n)n.hasOwnProperty(t)&&u.call(this,this.data[r][o],n,t);this.update()}function d(t,e){this.dispatch("state-update",{data:t,prop:e})}function u(e,t,o,r){var n=this;e[o]=void 0!==r?r:t[o],Array.isArray(e[o])&&function(t,e){var r=this,o=Object.getOwnPropertyNames(Array.prototype);for(var n in o)"function"==typeof Array.prototype[o[n]]&&(t[e][o[n]]=function(t,e,o){return function(){Array.prototype[t].apply(e[o],arguments),r.update(e,o)}}(o[n],t,e))}.call(this,e,o),Object.defineProperty(t,o,{get:function(){return e[o]},set:function(t){e[o]=t,n.update(e,o)}})}function l(t){this._init(t)}var h,f,y,v;(h=l).options=Object.create({}),h.registerOption=e,h.prototype._init=t,(f=l).prototype.eventListeners=Object.create({}),f.prototype.on=o,f.prototype.dispatch=r,(y=l).prototype.data=Object.create({}),y.prototype.models=Object.create({}),y.prototype.contextModels=Object.create({}),y.prototype.register=c,y.prototype.registerContext=p,y.prototype.update=d,(v=l).registerOption("el",{required:!0}),v.prototype.dom=Object.create({}),null!=window&&(window.Ezay=l)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
