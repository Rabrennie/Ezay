!function(){"use strict";function n(t){var e=t.options.el;if("string"==typeof e&&(e=document.querySelector(e)),null==e)throw"Could not bind to element";t.dom=function t(e,o){var r=[];for(var i=0;i<o.childNodes.length;i++){var n=o.childNodes[i];r.push(t(e,n))}var s={type:o.nodeName,props:a(o),children:r};return s}(t,e),t.on("state-update",function(t){var e=function t(e,o,r){if("#text"===e.type)return c(e,o);void 0!==this.models[e.type.toLowerCase()]&&(void 0===this.data[e.type.toLowerCase()][e.props["data-ezay-id"]]&&this.registerContext(e.props["data-ezay-id"],e.type.toLowerCase(),Object.assign({},this.models[e.type.toLowerCase()])),o=this.contextModels[e.type.toLowerCase()][e.props["data-ezay-id"]]);var i=document.createElement(e.type);for(var n in e.props)e.props.hasOwnProperty(n)&&function(){var t=e.props[n];i.setAttribute(n,t),"ezay:click"==n&&i.addEventListener("click",function(){return o[t].call(o)})}();for(var s=0;s<e.children.length;s++){var a=e.children[s];i.appendChild(t.call(this,a,o))}return i}.call(this,this.dom,{},""),o=document.querySelector("[data-ezay-id=".concat(this.dom.props["data-ezay-id"],"]"));o.parentNode.replaceChild(e,o)}.bind(t))}function a(t){return"#text"==t.nodeName?{textContent:t.textContent}:(t.setAttribute("data-ezay-id","_"+Math.random().toString(36).substr(2,9)),t&&Array.prototype.reduce.call(t.attributes,function(t,e){return t[e.name]=e.value,t},{})||{})}function c(t,e){for(var o,r=/{{\s*([a-zA-Z0-9]+)\s*}}/g,i=t.props.textContent;o=r.exec(i);){var n="";null!==e[o[1]]&&(n=e[o[1]]),i=i.replace(o[0],n)}return document.createTextNode(i)}function t(t){for(var e in this.options=Object.create(null),t)if(t.hasOwnProperty(e)){var o=t[e];void 0!==this.constructor.options[e]&&(this.options[e]=o)}for(var r in this.constructor.options)if(this.constructor.options.hasOwnProperty(r)){var i=this.constructor.options[r];if(void 0===this.options[r]){if(i.required)throw"Option ".concat(r," is required.");void 0!==i.default&&(this.options[r]=i.default)}}n(this)}function e(t,e){this.options[t]=Object.create(null),this.options[t].required=!!e.required,this.options[t].default=e.default}function o(t,e){void 0===this.eventListeners[t]&&(this.eventListeners[t]=[]),this.eventListeners[t].push(e)}function r(t,e){if(void 0!==this.eventListeners[t])for(var o=0;o<this.eventListeners[t].length;o++)this.eventListeners[t][o](e)}function i(t,e){if(void 0!==this.models[t])throw"Model "+t+" already registered.";this.models[t]=e,this.contextModels[t]=Object.create({}),this.data[t]=Object.create({}),this.update()}function s(o,r,i){for(var t in this.contextModels[r][o]=i,this.data[r][o]=Object.create(null),Object.defineProperty(i,"$add",{configurable:!1,enumerable:!1,value:function(t,e){p.call(this,this.data[r][o],i,t,e)}.bind(this)}),i)i.hasOwnProperty(t)&&p.call(this,this.data[r][o],i,t);this.update()}function d(t,e){this.dispatch("state-update",{data:t,prop:e})}function p(e,t,o,r){var i=this;e[o]=void 0!==r?r:t[o],Object.defineProperty(t,o,{get:function(){return e[o]},set:function(t){e[o]=t,i.update(e,o)}})}function u(t){this._init(t)}var h,l,f,v;(h=u).options=Object.create({}),h.registerOption=e,h.prototype._init=t,(l=u).prototype.eventListeners=Object.create({}),l.prototype.on=o,l.prototype.dispatch=r,(f=u).prototype.data=Object.create({}),f.prototype.models=Object.create({}),f.prototype.contextModels=Object.create({}),f.prototype.register=i,f.prototype.registerContext=s,f.prototype.update=d,(v=u).registerOption("el",{required:!0}),v.prototype.dom=Object.create({}),null!=window&&(window.Ezay=u)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
