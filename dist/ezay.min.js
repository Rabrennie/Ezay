(function () {
    'use strict';

    function initInit(Ezay) {
      Ezay.options = Object.create({});
      Ezay.registerOption = registerOption;
      Ezay.prototype._init = init;
    }

    function init(options) {
      this.options = Object.create(null);

      for (var key in options) {
        if (options.hasOwnProperty(key)) {
          var option = options[key];

          if (this.constructor.options[key] !== undefined) {
            this.options[key] = option;
          }
        }
      }

      for (var _key in this.constructor.options) {
        if (this.constructor.options.hasOwnProperty(_key)) {
          var _option = this.constructor.options[_key];

          if (this.options[_key] === undefined) {
            if (_option.required) {
              throw "Option ".concat(_key, " is required.");
            }

            if (_option.default !== undefined) {
              this.options[_key] = _option.default;
            }
          }
        }
      }
    }

    function registerOption(name, options) {
      this.options[name] = Object.create(null);
      this.options[name].required = !!options.required;
      this.options[name].default = options.default;
    }

    function initState(Ezay) {
      Ezay.prototype.data = Object.create({});
      Ezay.prototype.register = register;
      Ezay.prototype.update = update;
    }

    function register(name, obj) {
      if (this.data[name] !== undefined) {
        throw "Model " + name + " already registered.";
      }

      this.data[name] = Object.create(null);
      Object.defineProperty(obj, '$add', {
        configurable: false,
        enumerable: false,
        value: function (prop, val) {
          addWatcher.call(this, this.data[name], obj, prop, val);
        }.bind(this)
      });

      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          addWatcher.call(this, this.data[name], obj, key);
        }
      }
    } // TODO: do something


    function update(data, prop) {
      console.log(data, prop);
    } // TODO: handle arrays/objects


    function addWatcher(data, obj, prop, val) {
      var _this = this;

      if (val !== undefined) {
        data[prop] = val;
      } else {
        data[prop] = obj[prop];
      }

      Object.defineProperty(obj, prop, {
        get: function get() {
          return data[prop];
        },
        set: function set(val) {
          data[prop] = val;

          _this.update(data, prop);
        }
      });
    }

    function initRender(Ezay) {
      Ezay.registerOption('el', {
        'required': true
      });
    }

    function Ezay(options) {
      this._init(options);
    }

    initInit(Ezay);
    initState(Ezay);
    initRender(Ezay);

    if (window != null) {
      window.Ezay = Ezay;
    }

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXpheS5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnN0YW5jZS9pbml0LmpzIiwiLi4vc3JjL2luc3RhbmNlL3N0YXRlLmpzIiwiLi4vc3JjL2luc3RhbmNlL3JlbmRlci5qcyIsIi4uL3NyYy9pbnN0YW5jZS9pbmRleC5qcyIsIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbml0SW5pdChFemF5KSB7XHJcbiAgICBFemF5Lm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHt9KTtcclxuICAgIEV6YXkucmVnaXN0ZXJPcHRpb24gPSByZWdpc3Rlck9wdGlvbjtcclxuICAgIEV6YXkucHJvdG90eXBlLl9pbml0ID0gaW5pdDtcclxufVxyXG5cclxuZnVuY3Rpb24gaW5pdChvcHRpb25zKSB7XHJcbiAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbiA9IG9wdGlvbnNba2V5XTtcclxuICAgICAgICAgICAgaWYodGhpcy5jb25zdHJ1Y3Rvci5vcHRpb25zW2tleV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zW2tleV0gPSBvcHRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuY29uc3RydWN0b3Iub3B0aW9ucykge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLm9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSB0aGlzLmNvbnN0cnVjdG9yLm9wdGlvbnNba2V5XTtcclxuICAgICAgICAgICAgaWYodGhpcy5vcHRpb25zW2tleV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYob3B0aW9uLnJlcXVpcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgYE9wdGlvbiAke2tleX0gaXMgcmVxdWlyZWQuYDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmKG9wdGlvbi5kZWZhdWx0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnNba2V5XSA9IG9wdGlvbi5kZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZWdpc3Rlck9wdGlvbihuYW1lLCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLm9wdGlvbnNbbmFtZV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgdGhpcy5vcHRpb25zW25hbWVdLnJlcXVpcmVkID0gISFvcHRpb25zLnJlcXVpcmVkO1xyXG4gICAgdGhpcy5vcHRpb25zW25hbWVdLmRlZmF1bHQgPSBvcHRpb25zLmRlZmF1bHQ7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbml0SW5pdDsiLCJmdW5jdGlvbiBpbml0U3RhdGUoRXpheSkge1xyXG4gICAgRXpheS5wcm90b3R5cGUuZGF0YSA9IE9iamVjdC5jcmVhdGUoe30pO1xyXG4gICAgRXpheS5wcm90b3R5cGUucmVnaXN0ZXIgPSByZWdpc3RlcjtcclxuICAgIEV6YXkucHJvdG90eXBlLnVwZGF0ZSA9IHVwZGF0ZTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVnaXN0ZXIobmFtZSwgb2JqKSB7XHJcbiAgICBpZiAodGhpcy5kYXRhW25hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aHJvdyBcIk1vZGVsIFwiICsgbmFtZSArIFwiIGFscmVhZHkgcmVnaXN0ZXJlZC5cIlxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZGF0YVtuYW1lXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJyRhZGQnLCB7XHJcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24ocHJvcCwgdmFsKSB7XHJcbiAgICAgICAgICAgIGFkZFdhdGNoZXIuY2FsbCh0aGlzLCB0aGlzLmRhdGFbbmFtZV0sIG9iaiwgcHJvcCwgdmFsKTtcclxuICAgICAgICB9LmJpbmQodGhpcylcclxuICAgIH0pO1xyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICBhZGRXYXRjaGVyLmNhbGwodGhpcywgdGhpcy5kYXRhW25hbWVdLCBvYmosIGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBUT0RPOiBkbyBzb21ldGhpbmdcclxuZnVuY3Rpb24gdXBkYXRlKGRhdGEsIHByb3ApIHtcclxuICAgIGNvbnNvbGUubG9nKGRhdGEsIHByb3ApO1xyXG59XHJcblxyXG4vLyBUT0RPOiBoYW5kbGUgYXJyYXlzL29iamVjdHNcclxuZnVuY3Rpb24gYWRkV2F0Y2hlcihkYXRhLCBvYmosIHByb3AsIHZhbCkge1xyXG4gICAgY29uc3QgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGlmKHZhbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZGF0YVtwcm9wXSA9IHZhbFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBkYXRhW3Byb3BdID0gb2JqW3Byb3BdO1xyXG4gICAgfVxyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRhdGFbcHJvcF0gfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHsgZGF0YVtwcm9wXSA9IHZhbDsgX3RoaXMudXBkYXRlKGRhdGEsIHByb3ApOyB9LFxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGluaXRTdGF0ZTtcclxuIiwiZnVuY3Rpb24gaW5pdFJlbmRlcihFemF5KSB7XHJcblxyXG4gICAgRXpheS5yZWdpc3Rlck9wdGlvbignZWwnLCB7XHJcbiAgICAgICAgJ3JlcXVpcmVkJzogdHJ1ZVxyXG4gICAgfSk7XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbml0UmVuZGVyOyIsImltcG9ydCBpbml0SW5pdCBmcm9tICcuL2luaXQuanMnXHJcbmltcG9ydCBpbml0U3RhdGUgZnJvbSAnLi9zdGF0ZS5qcydcclxuaW1wb3J0IGluaXRSZW5kZXIgZnJvbSAnLi9yZW5kZXIuanMnXHJcblxyXG5mdW5jdGlvbiBFemF5KG9wdGlvbnMpIHtcclxuICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XHJcbn1cclxuXHJcbmluaXRJbml0KEV6YXkpO1xyXG5pbml0U3RhdGUoRXpheSk7XHJcbmluaXRSZW5kZXIoRXpheSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBFemF5OyIsImltcG9ydCBFemF5IGZyb20gJy4vaW5zdGFuY2UvaW5kZXguanMnO1xyXG5cclxuaWYod2luZG93ICE9IG51bGwpIHtcclxuICAgIHdpbmRvdy5FemF5ID0gRXpheTtcclxufSJdLCJuYW1lcyI6WyJpbml0SW5pdCIsIkV6YXkiLCJvcHRpb25zIiwiT2JqZWN0IiwiY3JlYXRlIiwicmVnaXN0ZXJPcHRpb24iLCJwcm90b3R5cGUiLCJfaW5pdCIsImluaXQiLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsIm9wdGlvbiIsImNvbnN0cnVjdG9yIiwidW5kZWZpbmVkIiwicmVxdWlyZWQiLCJkZWZhdWx0IiwibmFtZSIsImluaXRTdGF0ZSIsImRhdGEiLCJyZWdpc3RlciIsInVwZGF0ZSIsIm9iaiIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsInZhbHVlIiwicHJvcCIsInZhbCIsImFkZFdhdGNoZXIiLCJjYWxsIiwiYmluZCIsImNvbnNvbGUiLCJsb2ciLCJfdGhpcyIsImdldCIsInNldCIsImluaXRSZW5kZXIiLCJ3aW5kb3ciXSwibWFwcGluZ3MiOiI7OztJQUFBLFNBQVNBLFFBQVQsQ0FBa0JDLElBQWxCLEVBQXdCO0lBQ3BCQSxFQUFBQSxJQUFJLENBQUNDLE9BQUwsR0FBZUMsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxDQUFmO0lBQ0FILEVBQUFBLElBQUksQ0FBQ0ksY0FBTCxHQUFzQkEsY0FBdEI7SUFDQUosRUFBQUEsSUFBSSxDQUFDSyxTQUFMLENBQWVDLEtBQWYsR0FBdUJDLElBQXZCO0lBQ0g7O0lBRUQsU0FBU0EsSUFBVCxDQUFjTixPQUFkLEVBQXVCO0lBQ25CLE9BQUtBLE9BQUwsR0FBZUMsTUFBTSxDQUFDQyxNQUFQLENBQWMsSUFBZCxDQUFmOztJQUVBLE9BQUssSUFBTUssR0FBWCxJQUFrQlAsT0FBbEIsRUFBMkI7SUFDdkIsUUFBSUEsT0FBTyxDQUFDUSxjQUFSLENBQXVCRCxHQUF2QixDQUFKLEVBQWlDO0lBQzdCLFVBQU1FLE1BQU0sR0FBR1QsT0FBTyxDQUFDTyxHQUFELENBQXRCOztJQUNBLFVBQUcsS0FBS0csV0FBTCxDQUFpQlYsT0FBakIsQ0FBeUJPLEdBQXpCLE1BQWtDSSxTQUFyQyxFQUFnRDtJQUM1QyxhQUFLWCxPQUFMLENBQWFPLEdBQWIsSUFBb0JFLE1BQXBCO0lBQ0g7SUFDSjtJQUNKOztJQUVELE9BQUssSUFBTUYsSUFBWCxJQUFrQixLQUFLRyxXQUFMLENBQWlCVixPQUFuQyxFQUE0QztJQUN4QyxRQUFJLEtBQUtVLFdBQUwsQ0FBaUJWLE9BQWpCLENBQXlCUSxjQUF6QixDQUF3Q0QsSUFBeEMsQ0FBSixFQUFrRDtJQUM5QyxVQUFNRSxPQUFNLEdBQUcsS0FBS0MsV0FBTCxDQUFpQlYsT0FBakIsQ0FBeUJPLElBQXpC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
