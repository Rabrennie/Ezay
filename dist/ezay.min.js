!function(){"use strict";function d(t){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t){var e=t.options.el;if("string"==typeof e&&(e=document.querySelector(e)),null==e)throw"Could not bind to element";t.dom=function t(e,o){var r=[];for(var n=0;n<o.childNodes.length;n++){var i=o.childNodes[n];r.push(t(e,i))}var s={type:o.nodeName,props:a(o),children:r};return s}(t,e),t.on("state-update",function(t){var e=u.call(this,this.dom,{},""),o=document.querySelector("[data-ezay-id=".concat(this.dom.props["data-ezay-id"],"]"));o.parentNode.replaceChild(e,o)}.bind(t))}function a(t){return"#text"==t.nodeName?{textContent:t.textContent}:(t.setAttribute("data-ezay-id","_"+Math.random().toString(36).substr(2,9)),Array.prototype.reduce.call(t.attributes,function(t,e){return t[e.name]=e.value,t},{}))}function u(e,o){var r=this,t=e.props["data-ezay-id"],n=e.type.toLowerCase();if("#text"===n)return function(t,e){var o,r=/{{\s*([a-zA-Z0-9]+)\s*}}/g,n=t.props.textContent;for(;o=r.exec(n);){var i="";null!==e[o[1]]&&(i=e[o[1]]),n=n.replace(o[0],i)}return document.createTextNode(n)}(e,o);void 0!==this.models[n]&&(void 0===this.data[n][t]&&this.registerContext(t,n),o=this.contextModels[n][t]);var i=document.createElement(n);for(var s in e.props)if(e.props.hasOwnProperty(s)){var a=function(){var t=e.props[s];if(i.setAttribute(s,t),"ezay:click"==s&&i.addEventListener("click",function(){return o[t].call(o)}),"ezay:for"==s)return l.call(r,t,o,e,i),{v:i}}();if("object"===d(a))return a.v}for(var c=0;c<e.children.length;c++){var p=e.children[c];i.appendChild(u.call(this,p,o))}return i}function l(t,e,o,r){for(var n=t.split(" in "),i=e[n[1]],s=0;s<i.length;s++)for(var a=i[s],c=0;c<o.children.length;c++){var p=o.children[c],d={};d[n[0]]=a,r.appendChild(u.call(this,p,d))}}function t(t){for(var e in this.options=Object.create(null),t)if(t.hasOwnProperty(e)){var o=t[e];void 0!==this.constructor.options[e]&&(this.options[e]=o)}for(var r in this.constructor.options)if(this.constructor.options.hasOwnProperty(r)){var n=this.constructor.options[r];if(void 0===this.options[r]){if(n.required)throw"Option ".concat(r," is required.");void 0!==n.default&&(this.options[r]=n.default)}}i(this)}function e(t,e){this.options[t]=Object.create(null),this.options[t].required=!!e.required,this.options[t].default=e.default}function o(t,e){void 0===this.eventListeners[t]&&(this.eventListeners[t]=[]),this.eventListeners[t].push(e)}function r(t,e){if(void 0!==this.eventListeners[t])for(var o=0;o<this.eventListeners[t].length;o++)this.eventListeners[t][o](e)}function n(t,e){if(t=t.toLowerCase(),void 0!==this.models[t])throw"Model "+t+" already registered.";this.models[t]=e,this.contextModels[t]=Object.create({}),this.data[t]=Object.create({}),this.update()}function s(o,r){var n=Object.assign({},this.models[r]);for(var t in this.contextModels[r][o]=n,this.data[r][o]=Object.create(null),Object.defineProperty(n,"$add",{configurable:!1,enumerable:!1,value:function(t,e){p.call(this,this.data[r][o],n,t,e)}.bind(this)}),n)n.hasOwnProperty(t)&&p.call(this,this.data[r][o],n,t);this.update()}function c(t,e){this.dispatch("state-update",{data:t,prop:e})}function p(e,t,o,r){var n=this;e[o]=void 0!==r?r:t[o],Array.isArray(e[o])&&function(t,e){var r=this,o=Object.getOwnPropertyNames(Array.prototype);for(var n in o){var i=o[n];"function"==typeof Array.prototype[i]&&(t[e][i]=function(t,e,o){return function(){Array.prototype[t].apply(e[o],arguments),r.update(e,o)}}(i,t,e))}}.call(this,e,o),Object.defineProperty(t,o,{get:function(){return e[o]},set:function(t){e[o]=t,n.update(e,o)}})}function h(t){this._init(t)}var f,y,v,b;(f=h).options=Object.create({}),f.registerOption=e,f.prototype._init=t,(y=h).prototype.eventListeners=Object.create({}),y.prototype.on=o,y.prototype.dispatch=r,(v=h).prototype.data=Object.create({}),v.prototype.models=Object.create({}),v.prototype.contextModels=Object.create({}),v.prototype.register=n,v.prototype.registerContext=s,v.prototype.update=c,(b=h).registerOption("el",{required:!0}),b.prototype.dom=Object.create({}),null!=window&&(window.Ezay=h)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXpheS5taW4uanMiLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnN0YW5jZS9yZW5kZXIuanMiLCIuLi9zcmMvaW5zdGFuY2UvaW5pdC5qcyIsIi4uL3NyYy9pbnN0YW5jZS9ldmVudC5qcyIsIi4uL3NyYy9pbnN0YW5jZS9zdGF0ZS5qcyIsIi4uL3NyYy9pbnN0YW5jZS9pbmRleC5qcyIsIi4uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiByZW5kZXJNaXhpbihFemF5KSB7XHJcblxyXG4gICAgRXpheS5yZWdpc3Rlck9wdGlvbignZWwnLCB7XHJcbiAgICAgICAgJ3JlcXVpcmVkJzogdHJ1ZVxyXG4gICAgfSk7XHJcblxyXG4gICAgRXpheS5wcm90b3R5cGUuZG9tID0gT2JqZWN0LmNyZWF0ZSh7fSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpbml0UmVuZGVyKGV6YXkpIHtcclxuICAgIGxldCBlbCA9IGV6YXkub3B0aW9ucy5lbDtcclxuXHJcbiAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVsID09IG51bGwpIHtcclxuICAgICAgICB0aHJvdyBcIkNvdWxkIG5vdCBiaW5kIHRvIGVsZW1lbnRcIjtcclxuICAgIH1cclxuXHJcbiAgICBlemF5LmRvbSA9IGNyZWF0ZUVsZW1lbnQoZXpheSwgZWwpO1xyXG5cclxuICAgIGV6YXkub24oJ3N0YXRlLXVwZGF0ZScsIG9uU3RhdGVVcGRhdGUuYmluZChlemF5KSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQoZXpheSwgbm9kZSkge1xyXG5cclxuICAgIGNvbnN0IGNoaWxkcmVuID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IG4gPSBub2RlLmNoaWxkTm9kZXNbaV07XHJcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjcmVhdGVFbGVtZW50KGV6YXksIG4pKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVsID0ge1xyXG4gICAgICAgICd0eXBlJzogbm9kZS5ub2RlTmFtZSxcclxuICAgICAgICAncHJvcHMnOiBnZXRBdHRyaWJ1dGVzKG5vZGUpLFxyXG4gICAgICAgICdjaGlsZHJlbic6IGNoaWxkcmVuXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBlbDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlcyhub2RlKSB7XHJcbiAgICBcclxuICAgIGlmKG5vZGUubm9kZU5hbWUgPT0gJyN0ZXh0Jykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHRleHRDb250ZW50OiBub2RlLnRleHRDb250ZW50XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtZXpheS1pZCcsIHVpZCgpKTtcclxuXHJcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnJlZHVjZS5jYWxsKG5vZGUuYXR0cmlidXRlcywgZnVuY3Rpb24gKGFjYywgY3VyKSB7XHJcbiAgICAgICAgYWNjW2N1ci5uYW1lXSA9IGN1ci52YWx1ZTtcclxuICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgfSwge30pO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gdWlkKCkge1xyXG4gICAgcmV0dXJuICdfJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIG9uU3RhdGVVcGRhdGUob2JqKSB7XHJcbiAgICBjb25zdCB2bm9kZSA9IHJlbmRlckVsLmNhbGwodGhpcywgdGhpcy5kb20sIHt9LCAnJyk7XHJcbiAgICBjb25zdCBub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtZXpheS1pZD0ke3RoaXMuZG9tLnByb3BzWydkYXRhLWV6YXktaWQnXX1dYCk7XHJcbiAgICBcclxuICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQodm5vZGUsIG5vZGUpO1xyXG59O1xyXG5cclxuLy8gVE9ETzogaW1wbGVtZW50IGEgYmV0dGVyIHZpcnR1YWwgZG9tICggb25seSB1cGRhdGUgY2hhbmdlZCBub2RlcyBldGMuIClcclxuLy8gVE9ETzogaGFuZGxlIGV4dGVybmFsIGNoYW5nZXMgdG8gZG9tXHJcbmZ1bmN0aW9uIHJlbmRlckVsKGVsLCBjb250ZXh0KSB7XHJcbiAgICBjb25zdCBlemF5SWQgPSBlbC5wcm9wc1snZGF0YS1lemF5LWlkJ107XHJcbiAgICBjb25zdCB0eXBlID0gZWwudHlwZS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgIGlmKHR5cGUgPT09ICcjdGV4dCcpIHtcclxuICAgICAgICByZXR1cm4gY3JlYXRlVGV4dE5vZGUoZWwsIGNvbnRleHQpXHJcbiAgICB9XHJcblxyXG4gICAgaWYodGhpcy5tb2RlbHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmKHRoaXMuZGF0YVt0eXBlXVtlemF5SWRdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWdpc3RlckNvbnRleHQoZXpheUlkLCB0eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGV4dCA9IHRoaXMuY29udGV4dE1vZGVsc1t0eXBlXVtlemF5SWRdO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHZub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKVxyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IGluIGVsLnByb3BzKSB7XHJcbiAgICAgICAgaWYgKGVsLnByb3BzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvcCA9IGVsLnByb3BzW2tleV07XHJcbiAgICAgICAgICAgIHZub2RlLnNldEF0dHJpYnV0ZShrZXksIHByb3ApO1xyXG5cclxuICAgICAgICAgICAgaWYoa2V5ID09IFwiZXpheTpjbGlja1wiKSB7XHJcbiAgICAgICAgICAgICAgICB2bm9kZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IGNvbnRleHRbcHJvcF0uY2FsbChjb250ZXh0KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmKGtleSA9PSBcImV6YXk6Zm9yXCIpIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlckxpc3QuY2FsbCh0aGlzLCBwcm9wLCBjb250ZXh0LCBlbCwgdm5vZGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZub2RlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWwuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBjaGlsZCA9IGVsLmNoaWxkcmVuW2ldO1xyXG4gICAgICAgIHZub2RlLmFwcGVuZENoaWxkKHJlbmRlckVsLmNhbGwodGhpcywgY2hpbGQsIGNvbnRleHQpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdm5vZGU7XHJcbn07XHJcblxyXG5mdW5jdGlvbiByZW5kZXJMaXN0KHByb3AsIGNvbnRleHQsIGVsLCB2bm9kZSkge1xyXG4gICAgY29uc3QgYXJncyA9IHByb3Auc3BsaXQoJyBpbiAnKTtcclxuICAgIGNvbnN0IGRhdGEgPSBjb250ZXh0W2FyZ3NbMV1dO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dERhdGEgPSBkYXRhW2ldO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZWwuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBlbC5jaGlsZHJlbltqXTtcclxuICAgICAgICAgICAgY29uc3QgY2hpbGRDb250ZXh0ID0ge307XHJcbiAgICAgICAgICAgIGNoaWxkQ29udGV4dFthcmdzWzBdXSA9IGNvbnRleHREYXRhO1xyXG4gICAgICAgICAgICB2bm9kZS5hcHBlbmRDaGlsZChyZW5kZXJFbC5jYWxsKHRoaXMsIGNoaWxkLCBjaGlsZENvbnRleHQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlKGVsLCBjb250ZXh0KSB7XHJcbiAgICB2YXIgcmUgPSAve3tcXHMqKFthLXpBLVowLTldKylcXHMqfX0vZ1xyXG4gICAgdmFyIHRleHQgPSBlbC5wcm9wcy50ZXh0Q29udGVudDtcclxuICAgIHZhciByZXM7XHJcbiAgICB3aGlsZShyZXMgPSByZS5leGVjKHRleHQpKSB7XHJcbiAgICAgICAgdmFyIGRhdGEgPSAnJzsgXHJcbiAgICAgICAgaWYoY29udGV4dFtyZXNbMV1dICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSBjb250ZXh0W3Jlc1sxXV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UocmVzWzBdLCBkYXRhKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCByZW5kZXJNaXhpbjsiLCJpbXBvcnQgeyBpbml0UmVuZGVyIH0gZnJvbSAnLi9yZW5kZXIuanMnXHJcblxyXG5mdW5jdGlvbiBpbml0TWl4aW4oRXpheSkge1xyXG4gICAgRXpheS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh7fSk7XHJcbiAgICBFemF5LnJlZ2lzdGVyT3B0aW9uID0gcmVnaXN0ZXJPcHRpb247XHJcbiAgICBFemF5LnByb3RvdHlwZS5faW5pdCA9IGluaXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGluaXQob3B0aW9ucykge1xyXG4gICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICBjb25zdCBvcHRpb24gPSBvcHRpb25zW2tleV07XHJcbiAgICAgICAgICAgIGlmKHRoaXMuY29uc3RydWN0b3Iub3B0aW9uc1trZXldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1trZXldID0gb3B0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmNvbnN0cnVjdG9yLm9wdGlvbnMpIHtcclxuICAgICAgICBpZiAodGhpcy5jb25zdHJ1Y3Rvci5vcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5jb25zdHJ1Y3Rvci5vcHRpb25zW2tleV07XHJcbiAgICAgICAgICAgIGlmKHRoaXMub3B0aW9uc1trZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmKG9wdGlvbi5yZXF1aXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGBPcHRpb24gJHtrZXl9IGlzIHJlcXVpcmVkLmA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZihvcHRpb24uZGVmYXVsdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zW2tleV0gPSBvcHRpb24uZGVmYXVsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbml0UmVuZGVyKHRoaXMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWdpc3Rlck9wdGlvbihuYW1lLCBvcHRpb25zKSB7XHJcbiAgICB0aGlzLm9wdGlvbnNbbmFtZV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgdGhpcy5vcHRpb25zW25hbWVdLnJlcXVpcmVkID0gISFvcHRpb25zLnJlcXVpcmVkO1xyXG4gICAgdGhpcy5vcHRpb25zW25hbWVdLmRlZmF1bHQgPSBvcHRpb25zLmRlZmF1bHQ7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbml0TWl4aW47IiwiZnVuY3Rpb24gZXZlbnRNaXhpbihFemF5KSB7XHJcblxyXG4gICAgRXpheS5wcm90b3R5cGUuZXZlbnRMaXN0ZW5lcnMgPSBPYmplY3QuY3JlYXRlKHt9KTtcclxuXHJcbiAgICBFemF5LnByb3RvdHlwZS5vbiA9IG9uO1xyXG4gICAgRXpheS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBkaXNwYXRjaDtcclxuXHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uKGV2ZW50LCBoYW5kbGVyKSB7XHJcbiAgICBpZih0aGlzLmV2ZW50TGlzdGVuZXJzW2V2ZW50XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudExpc3RlbmVyc1tldmVudF0gPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmV2ZW50TGlzdGVuZXJzW2V2ZW50XS5wdXNoKGhhbmRsZXIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkaXNwYXRjaChldmVudCwgb2JqKSB7XHJcbiAgICBpZih0aGlzLmV2ZW50TGlzdGVuZXJzW2V2ZW50XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ldmVudExpc3RlbmVyc1tldmVudF0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB0aGlzLmV2ZW50TGlzdGVuZXJzW2V2ZW50XVtpXShvYmopO1xyXG4gICAgICAgIFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBldmVudE1peGluOyIsImZ1bmN0aW9uIHN0YXRlTWl4aW4oRXpheSkge1xyXG4gICAgRXpheS5wcm90b3R5cGUuZGF0YSA9IE9iamVjdC5jcmVhdGUoe30pO1xyXG4gICAgRXpheS5wcm90b3R5cGUubW9kZWxzID0gT2JqZWN0LmNyZWF0ZSh7fSk7XHJcbiAgICBFemF5LnByb3RvdHlwZS5jb250ZXh0TW9kZWxzID0gT2JqZWN0LmNyZWF0ZSh7fSk7XHJcbiAgICBFemF5LnByb3RvdHlwZS5yZWdpc3RlciA9IHJlZ2lzdGVyO1xyXG4gICAgRXpheS5wcm90b3R5cGUucmVnaXN0ZXJDb250ZXh0ID0gcmVnaXN0ZXJDb250ZXh0O1xyXG4gICAgRXpheS5wcm90b3R5cGUudXBkYXRlID0gdXBkYXRlO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZWdpc3RlcihuYW1lLCBvYmopIHtcclxuICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgaWYgKHRoaXMubW9kZWxzW25hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aHJvdyBcIk1vZGVsIFwiICsgbmFtZSArIFwiIGFscmVhZHkgcmVnaXN0ZXJlZC5cIlxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubW9kZWxzW25hbWVdID0gb2JqO1xyXG5cclxuICAgIHRoaXMuY29udGV4dE1vZGVsc1tuYW1lXSA9IE9iamVjdC5jcmVhdGUoe30pO1xyXG4gICAgdGhpcy5kYXRhW25hbWVdID0gT2JqZWN0LmNyZWF0ZSh7fSk7XHJcblxyXG4gICAgdGhpcy51cGRhdGUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVnaXN0ZXJDb250ZXh0KG5hbWUsIG1vZGVsTmFtZSkge1xyXG5cclxuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMubW9kZWxzW21vZGVsTmFtZV0pO1xyXG4gICAgdGhpcy5jb250ZXh0TW9kZWxzW21vZGVsTmFtZV1bbmFtZV0gPSBvYmo7XHJcbiAgICB0aGlzLmRhdGFbbW9kZWxOYW1lXVtuYW1lXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgJyRhZGQnLCB7XHJcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHByb3AsIHZhbCkge1xyXG4gICAgICAgICAgICBhZGRXYXRjaGVyLmNhbGwodGhpcywgdGhpcy5kYXRhW21vZGVsTmFtZV1bbmFtZV0sIG9iaiwgcHJvcCwgdmFsKTtcclxuICAgICAgICB9LmJpbmQodGhpcylcclxuICAgIH0pO1xyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICBhZGRXYXRjaGVyLmNhbGwodGhpcywgdGhpcy5kYXRhW21vZGVsTmFtZV1bbmFtZV0sIG9iaiwga2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy51cGRhdGUoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdXBkYXRlKGRhdGEsIHByb3ApIHtcclxuICAgIHRoaXMuZGlzcGF0Y2goJ3N0YXRlLXVwZGF0ZScsIHsgZGF0YSwgcHJvcCB9KVxyXG59XHJcblxyXG4vLyBUT0RPOiBoYW5kbGUgb2JqZWN0c1xyXG5mdW5jdGlvbiBhZGRXYXRjaGVyKGRhdGEsIG9iaiwgcHJvcCwgdmFsKSB7XHJcbiAgICBjb25zdCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZGF0YVtwcm9wXSA9IHZhbFxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBkYXRhW3Byb3BdID0gb2JqW3Byb3BdO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGFbcHJvcF0pKSB7XHJcbiAgICAgICAgb3ZlcnJpZGVBcnJheS5jYWxsKHRoaXMsIGRhdGEsIHByb3ApO1xyXG4gICAgfVxyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIHByb3AsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRhdGFbcHJvcF0gfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWwpIHsgZGF0YVtwcm9wXSA9IHZhbDsgX3RoaXMudXBkYXRlKGRhdGEsIHByb3ApOyB9LFxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG92ZXJyaWRlQXJyYXkoZGF0YSwgcHJvcCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICB2YXIgYXJyYXlQcm90b3R5cGUgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhBcnJheS5wcm90b3R5cGUpO1xyXG4gICAgZm9yICh2YXIgaW5kZXggaW4gYXJyYXlQcm90b3R5cGUpIHtcclxuICAgICAgICBjb25zdCBmdW5jTmFtZSA9IGFycmF5UHJvdG90eXBlW2luZGV4XTtcclxuICAgICAgICBpZiAodHlwZW9mIEFycmF5LnByb3RvdHlwZVtmdW5jTmFtZV0gPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICBkYXRhW3Byb3BdW2Z1bmNOYW1lXSA9IChmdW5jdGlvbihmdW5jTmFtZSwgZGF0YSwgcHJvcCkge3JldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGVbZnVuY05hbWVdLmFwcGx5KGRhdGFbcHJvcF0sIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGUoZGF0YSwgcHJvcCk7XHJcbiAgICAgICAgICAgIH19KShmdW5jTmFtZSwgZGF0YSwgcHJvcClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBzdGF0ZU1peGluO1xyXG4iLCJpbXBvcnQgaW5pdE1peGluIGZyb20gJy4vaW5pdC5qcydcclxuaW1wb3J0IGV2ZW50TWl4aW4gZnJvbSAnLi9ldmVudC5qcydcclxuaW1wb3J0IHN0YXRlTWl4aW4gZnJvbSAnLi9zdGF0ZS5qcydcclxuaW1wb3J0IHJlbmRlck1peGluIGZyb20gJy4vcmVuZGVyLmpzJ1xyXG5cclxuZnVuY3Rpb24gRXpheShvcHRpb25zKSB7XHJcbiAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xyXG59XHJcblxyXG5pbml0TWl4aW4oRXpheSk7XHJcbmV2ZW50TWl4aW4oRXpheSk7XHJcbnN0YXRlTWl4aW4oRXpheSk7XHJcbnJlbmRlck1peGluKEV6YXkpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRXpheTsiLCJpbXBvcnQgRXpheSBmcm9tICcuL2luc3RhbmNlL2luZGV4LmpzJztcclxuXHJcbmlmKHdpbmRvdyAhPSBudWxsKSB7XHJcbiAgICB3aW5kb3cuRXpheSA9IEV6YXk7XHJcbn0iXSwibmFtZXMiOlsiaW5pdFJlbmRlciIsImV6YXkiLCJlbCIsIm9wdGlvbnMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJkb20iLCJjcmVhdGVFbGVtZW50Iiwibm9kZSIsImNoaWxkcmVuIiwiaSIsImNoaWxkTm9kZXMiLCJsZW5ndGgiLCJuIiwicHVzaCIsIm5vZGVOYW1lIiwiZ2V0QXR0cmlidXRlcyIsIm9uIiwib2JqIiwidm5vZGUiLCJyZW5kZXJFbCIsImNhbGwiLCJ0aGlzIiwicHJvcHMiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIiwiYmluZCIsInRleHRDb250ZW50Iiwic2V0QXR0cmlidXRlIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic3Vic3RyIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJyZWR1Y2UiLCJhdHRyaWJ1dGVzIiwiYWNjIiwiY3VyIiwibmFtZSIsInZhbHVlIiwiY29udGV4dCIsImV6YXlJZCIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsInJlcyIsInJlIiwidGV4dCIsImV4ZWMiLCJkYXRhIiwicmVwbGFjZSIsImNyZWF0ZVRleHROb2RlIiwidW5kZWZpbmVkIiwibW9kZWxzIiwicmVnaXN0ZXJDb250ZXh0IiwiY29udGV4dE1vZGVscyIsImtleSIsImhhc093blByb3BlcnR5IiwicHJvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW5kZXJMaXN0IiwiX3RoaXMiLCJjaGlsZCIsImFwcGVuZENoaWxkIiwiYXJncyIsInNwbGl0IiwiY29udGV4dERhdGEiLCJqIiwiY2hpbGRDb250ZXh0IiwiaW5pdCIsIk9iamVjdCIsImNyZWF0ZSIsIm9wdGlvbiIsImNvbnN0cnVjdG9yIiwicmVxdWlyZWQiLCJkZWZhdWx0IiwicmVnaXN0ZXJPcHRpb24iLCJldmVudCIsImhhbmRsZXIiLCJldmVudExpc3RlbmVycyIsImRpc3BhdGNoIiwicmVnaXN0ZXIiLCJ1cGRhdGUiLCJtb2RlbE5hbWUiLCJhc3NpZ24iLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJ2YWwiLCJhZGRXYXRjaGVyIiwiaXNBcnJheSIsImFycmF5UHJvdG90eXBlIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImluZGV4IiwiZnVuY05hbWUiLCJhcHBseSIsImFyZ3VtZW50cyIsImdldCIsInNldCIsIkV6YXkiLCJfaW5pdCIsIndpbmRvdyJdLCJtYXBwaW5ncyI6IjhQQVNPLFNBQVNBLEVBQVdDLE9BQ25CQyxFQUFLRCxFQUFLRSxRQUFRRCxNQUVKLGlCQUFQQSxJQUNQQSxFQUFLRSxTQUFTQyxjQUFjSCxJQUd0QixNQUFOQSxPQUNNLDRCQUdWRCxFQUFLSyxJQUtULFNBQVNDLEVBQWNOLEVBQU1PLE9BRW5CQyxFQUFXLE9BQ1osSUFBSUMsRUFBSSxFQUFHQSxFQUFJRixFQUFLRyxXQUFXQyxPQUFRRixJQUFLLEtBQ3ZDRyxFQUFJTCxFQUFLRyxXQUFXRCxHQUMxQkQsRUFBU0ssS0FBS1AsRUFBY04sRUFBTVksUUFHaENYLEVBQUssTUFDQ00sRUFBS08sZUFDSkMsRUFBY1IsWUFDWEMsVUFHVFAsRUFuQklLLENBQWNOLEVBQU1DLEdBRS9CRCxFQUFLZ0IsR0FBRyxlQXdDWixTQUF1QkMsT0FDYkMsRUFBUUMsRUFBU0MsS0FBS0MsS0FBTUEsS0FBS2hCLElBQUssR0FBSSxJQUMxQ0Us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
